TRICK-MIX-CHECK
`find-name`:
#t
'((read valuelist) ((search . #hash((name . y) (namelist . (x y z)))) (valuelist := cdr valuelist) (return car valuelist)))
`The Trick I proj`:
`source`:
'((if 0 goto 3) (right) (goto 0) (write 1))
`trick-target-1`:
'((read Right)
  (0 (Left := '()) (if (equal? '0 (car Right)) goto 1 goto 2))
  (1 (Right := cons '1 (cdr Right)) (return Right))
  (2 (Left := cons (car Right) Left) (Right := cdr Right) (if (equal? '0 (car Right)) goto 1 goto 2)))
check `trick-target-1`:
#t
`The Trick II proj`:
`trick-proj2/comp`:
(list
 '(read vs0)
 (list
  0
  (list 'Pending ':= 'quote (set))
  '(Res := '((read Right)))
  '(PPVS := env-label 'init (make-immutable-hash vs0))
  '(PP := car PPVS)
  '(VS := cdr PPVS)
  '(Marked := set-add (list->set ()) PPVS)
  '(Code := list (env-label PP VS))
  '(VS := update-vs VS 'Qtail '(Q))
  '(Code := append Code (list (append '(Left :=) (reduce '('()) VS))))
  '(if (int-expr (hash->list VS) '(null? Qtail)) goto 63 goto 1))
 '(1
   (VS := update-vs VS 'Instruction '(car Qtail))
   (VS := update-vs VS 'Qtail '(cdr Qtail))
   (VS := update-vs VS 'Operator '(car Instruction))
   (if (int-expr (hash->list VS) '(equal? Operator 'right)) goto 7 goto 2))
 '(2 (if (int-expr (hash->list VS) '(equal? Operator 'left)) goto 6 goto 3))
 '(3 (if (int-expr (hash->list VS) '(equal? Operator 'write)) goto 66 goto 4))
 '(4 (if (int-expr (hash->list VS) '(equal? Operator 'goto)) goto 5 goto 8))
 '(5 (VS := update-vs VS 'NextLabel '(cadr Instruction)) (VS := update-vs VS 'Qtail '(list-tail Q NextLabel)) (if (int-expr (hash->list VS) '(null? Qtail)) goto 63 goto 1))
 '(6
   (Code := append Code (list (append '(Right :=) (reduce '(cons (car Left) Right) VS))))
   (Code := append Code (list (append '(Left :=) (reduce '(cdr Left) VS))))
   (if (int-expr (hash->list VS) '(null? Qtail)) goto 63 goto 1))
 '(7
   (Code := append Code (list (append '(Left :=) (reduce '(cons (car Right) Left) VS))))
   (Code := append Code (list (append '(Right :=) (reduce '(cdr Right) VS))))
   (if (int-expr (hash->list VS) '(null? Qtail)) goto 63 goto 1))
 '(8 (if (int-expr (hash->list VS) '(equal? Operator 'if)) goto 9 goto 23))
 '(9
   (VS := update-vs VS 'Symbol '(cadr Instruction))
   (VS := update-vs VS 'NextLabel '(cadddr Instruction))
   (Pending := update-pending-with-lbl Pending VS Marked 'jump 'loop)
   (Code := append Code (list (append (append '(if) (list (reduce '(equal? Symbol (car Right)) VS))) (list goto (env-label 'jump VS) goto (env-label 'loop VS)))))
   (Res := append Res (list Code))
   (if (set-empty? Pending) goto 62 goto 10))
 '(10
   (PPVS := set-first Pending)
   (Pending := set-rest Pending)
   (PP := car PPVS)
   (VS := cdr PPVS)
   (Marked := set-add Marked PPVS)
   (Code := list (env-label PP VS))
   (if (equal? PP 'jump) goto 11 goto 42))
 '(11 (VS := update-vs VS 'Qtail '(list-tail Q NextLabel)) (if (int-expr (hash->list VS) '(null? Qtail)) goto 12 goto 19))
 '(12 (Code := append Code (list (append '(return) (reduce '(Right) VS)))) (Res := append Res (list Code)) (if (set-empty? Pending) goto 13 goto 14))
 '(13 (return Res))
 '(14
   (PPVS := set-first Pending)
   (Pending := set-rest Pending)
   (PP := car PPVS)
   (VS := cdr PPVS)
   (Marked := set-add Marked PPVS)
   (Code := list (env-label PP VS))
   (if (equal? PP 'jump) goto 29 goto 15))
 '(15 (if (equal? PP 'loop) goto 17 goto 16))
 '(16 (return 'no-dyn-lbl))
 '(17 (if (int-expr (hash->list VS) '(null? Qtail)) goto 18 goto 31))
 '(18 (Code := append Code (list (append '(return) (reduce '(Right) VS)))) (Res := append Res (list Code)) (if (set-empty? Pending) goto 25 goto 30))
 '(19
   (VS := update-vs VS 'Instruction '(car Qtail))
   (VS := update-vs VS 'Qtail '(cdr Qtail))
   (VS := update-vs VS 'Operator '(car Instruction))
   (if (int-expr (hash->list VS) '(equal? Operator 'right)) goto 20 goto 21))
 '(20
   (Code := append Code (list (append '(Left :=) (reduce '(cons (car Right) Left) VS))))
   (Code := append Code (list (append '(Right :=) (reduce '(cdr Right) VS))))
   (if (int-expr (hash->list VS) '(null? Qtail)) goto 12 goto 19))
 '(21 (if (int-expr (hash->list VS) '(equal? Operator 'left)) goto 22 goto 26))
 '(22
   (Code := append Code (list (append '(Right :=) (reduce '(cons (car Left) Right) VS))))
   (Code := append Code (list (append '(Left :=) (reduce '(cdr Left) VS))))
   (if (int-expr (hash->list VS) '(null? Qtail)) goto 12 goto 19))
 '(23 (Code := append Code (list (append '(return) (reduce '(('syntaxerror: Instruction)) VS)))) (Res := append Res (list Code)) (if (set-empty? Pending) goto 24 goto 41))
 '(24 (return Res))
 '(25 (return Res))
 '(26 (if (int-expr (hash->list VS) '(equal? Operator 'write)) goto 48 goto 27))
 '(27 (if (int-expr (hash->list VS) '(equal? Operator 'goto)) goto 28 goto 33))
 '(28 (VS := update-vs VS 'NextLabel '(cadr Instruction)) (VS := update-vs VS 'Qtail '(list-tail Q NextLabel)) (if (int-expr (hash->list VS) '(null? Qtail)) goto 12 goto 19))
 '(29 (VS := update-vs VS 'Qtail '(list-tail Q NextLabel)) (if (int-expr (hash->list VS) '(null? Qtail)) goto 12 goto 19))
 '(30
   (PPVS := set-first Pending)
   (Pending := set-rest Pending)
   (PP := car PPVS)
   (VS := cdr PPVS)
   (Marked := set-add Marked PPVS)
   (Code := list (env-label PP VS))
   (if (equal? PP 'jump) goto 29 goto 15))
 '(31
   (VS := update-vs VS 'Instruction '(car Qtail))
   (VS := update-vs VS 'Qtail '(cdr Qtail))
   (VS := update-vs VS 'Operator '(car Instruction))
   (if (int-expr (hash->list VS) '(equal? Operator 'right)) goto 32 goto 49))
 '(32
   (Code := append Code (list (append '(Left :=) (reduce '(cons (car Right) Left) VS))))
   (Code := append Code (list (append '(Right :=) (reduce '(cdr Right) VS))))
   (if (int-expr (hash->list VS) '(null? Qtail)) goto 18 goto 31))
 '(33 (if (int-expr (hash->list VS) '(equal? Operator 'if)) goto 34 goto 36))
 '(34
   (VS := update-vs VS 'Symbol '(cadr Instruction))
   (VS := update-vs VS 'NextLabel '(cadddr Instruction))
   (Pending := update-pending-with-lbl Pending VS Marked 'jump 'loop)
   (Code := append Code (list (append (append '(if) (list (reduce '(equal? Symbol (car Right)) VS))) (list goto (env-label 'jump VS) goto (env-label 'loop VS)))))
   (Res := append Res (list Code))
   (if (set-empty? Pending) goto 35 goto 40))
 '(35 (return Res))
 '(36 (Code := append Code (list (append '(return) (reduce '(('syntaxerror: Instruction)) VS)))) (Res := append Res (list Code)) (if (set-empty? Pending) goto 38 goto 37))
 '(37
   (PPVS := set-first Pending)
   (Pending := set-rest Pending)
   (PP := car PPVS)
   (VS := cdr PPVS)
   (Marked := set-add Marked PPVS)
   (Code := list (env-label PP VS))
   (if (equal? PP 'jump) goto 39 goto 45))
 '(38 (return Res))
 '(39 (VS := update-vs VS 'Qtail '(list-tail Q NextLabel)) (if (int-expr (hash->list VS) '(null? Qtail)) goto 12 goto 19))
 '(40
   (PPVS := set-first Pending)
   (Pending := set-rest Pending)
   (PP := car PPVS)
   (VS := cdr PPVS)
   (Marked := set-add Marked PPVS)
   (Code := list (env-label PP VS))
   (if (equal? PP 'jump) goto 11 goto 42))
 '(41
   (PPVS := set-first Pending)
   (Pending := set-rest Pending)
   (PP := car PPVS)
   (VS := cdr PPVS)
   (Marked := set-add Marked PPVS)
   (Code := list (env-label PP VS))
   (if (equal? PP 'jump) goto 39 goto 45))
 '(42 (if (equal? PP 'loop) goto 44 goto 43))
 '(43 (return 'no-dyn-lbl))
 '(44 (if (int-expr (hash->list VS) '(null? Qtail)) goto 18 goto 31))
 '(45 (if (equal? PP 'loop) goto 46 goto 47))
 '(46 (if (int-expr (hash->list VS) '(null? Qtail)) goto 18 goto 31))
 '(47 (return 'no-dyn-lbl))
 '(48
   (VS := update-vs VS 'Symbol '(cadr Instruction))
   (Code := append Code (list (append '(Right :=) (reduce '(cons Symbol (cdr Right)) VS))))
   (if (int-expr (hash->list VS) '(null? Qtail)) goto 12 goto 19))
 '(49 (if (int-expr (hash->list VS) '(equal? Operator 'left)) goto 50 goto 51))
 '(50
   (Code := append Code (list (append '(Right :=) (reduce '(cons (car Left) Right) VS))))
   (Code := append Code (list (append '(Left :=) (reduce '(cdr Left) VS))))
   (if (int-expr (hash->list VS) '(null? Qtail)) goto 18 goto 31))
 '(51 (if (int-expr (hash->list VS) '(equal? Operator 'write)) goto 52 goto 53))
 '(52
   (VS := update-vs VS 'Symbol '(cadr Instruction))
   (Code := append Code (list (append '(Right :=) (reduce '(cons Symbol (cdr Right)) VS))))
   (if (int-expr (hash->list VS) '(null? Qtail)) goto 18 goto 31))
 '(53 (if (int-expr (hash->list VS) '(equal? Operator 'goto)) goto 54 goto 55))
 '(54 (VS := update-vs VS 'NextLabel '(cadr Instruction)) (VS := update-vs VS 'Qtail '(list-tail Q NextLabel)) (if (int-expr (hash->list VS) '(null? Qtail)) goto 18 goto 31))
 '(55 (if (int-expr (hash->list VS) '(equal? Operator 'if)) goto 56 goto 59))
 '(56
   (VS := update-vs VS 'Symbol '(cadr Instruction))
   (VS := update-vs VS 'NextLabel '(cadddr Instruction))
   (Pending := update-pending-with-lbl Pending VS Marked 'jump 'loop)
   (Code := append Code (list (append (append '(if) (list (reduce '(equal? Symbol (car Right)) VS))) (list goto (env-label 'jump VS) goto (env-label 'loop VS)))))
   (Res := append Res (list Code))
   (if (set-empty? Pending) goto 57 goto 58))
 '(57 (return Res))
 '(58
   (PPVS := set-first Pending)
   (Pending := set-rest Pending)
   (PP := car PPVS)
   (VS := cdr PPVS)
   (Marked := set-add Marked PPVS)
   (Code := list (env-label PP VS))
   (if (equal? PP 'jump) goto 11 goto 42))
 '(59 (Code := append Code (list (append '(return) (reduce '(('syntaxerror: Instruction)) VS)))) (Res := append Res (list Code)) (if (set-empty? Pending) goto 60 goto 61))
 '(60 (return Res))
 '(61
   (PPVS := set-first Pending)
   (Pending := set-rest Pending)
   (PP := car PPVS)
   (VS := cdr PPVS)
   (Marked := set-add Marked PPVS)
   (Code := list (env-label PP VS))
   (if (equal? PP 'jump) goto 39 goto 45))
 '(62 (return Res))
 '(63 (Code := append Code (list (append '(return) (reduce '(Right) VS)))) (Res := append Res (list Code)) (if (set-empty? Pending) goto 65 goto 64))
 '(64
   (PPVS := set-first Pending)
   (Pending := set-rest Pending)
   (PP := car PPVS)
   (VS := cdr PPVS)
   (Marked := set-add Marked PPVS)
   (Code := list (env-label PP VS))
   (if (equal? PP 'jump) goto 29 goto 15))
 '(65 (return Res))
 '(66
   (VS := update-vs VS 'Symbol '(cadr Instruction))
   (Code := append Code (list (append '(Right :=) (reduce '(cons Symbol (cdr Right)) VS))))
   (if (int-expr (hash->list VS) '(null? Qtail)) goto 63 goto 1)))
`source`:
'((if 0 goto 3) (right) (goto 0) (write 1))
`trick-target-2`:
'((read Right)
  (0 (Left := '()) (if (equal? '0 (car Right)) goto 1 goto 2))
  (1 (Right := cons '1 (cdr Right)) (return Right))
  (2 (Left := cons (car Right) Left) (Right := cdr Right) (if (equal? '0 (car Right)) goto 1 goto 2)))
check `trick-target-2`:
#t
`The Trick III proj`:
`trick-proj3/cogen`:
(list
 '(read vs0)
 (list
  0
  (list 'Pending ':= 'quote (set))
  '(Res := '((read vs0)))
  '(PPVS := env-label 'init (make-immutable-hash vs0))
  '(PP := car PPVS)
  '(VS := cdr PPVS)
  '(Marked := set-add (list->set ()) PPVS)
  '(Code := list (env-label PP VS))
  '(Code := append Code (list (append '(Pending :=) (reduce '(list->set '()) VS))))
  '(VS := update-vs VS 'static '(car div))
  '(VS := update-vs VS 'dynamic '(cdr div))
  '(Code := append Code (list (append '(Res :=) (reduce '((list (cons 'read (set-subtract (cdar program) static)))) VS))))
  '(Code := append Code (list (append '(PPVS :=) (reduce '(env-label (caadr program) (make-immutable-hash vs0)) VS))))
  '(Code := append Code (list (append '(PP :=) (reduce '(car PPVS) VS))))
  '(Code := append Code (list (append '(VS :=) (reduce '(cdr PPVS) VS))))
  '(VS := update-vs VS 'BB '(hash-ref (make-immutable-hash (cdr program)) (caadr program)))
  '(VS := update-vs VS 'program '(make-immutable-hash (cdr program)))
  '(Code := append Code (list (append '(Marked :=) (reduce '(set-add (list->set ()) PPVS) VS))))
  '(VS := update-vs VS 'dynamic-labels '(get-dynamic-labels static program))
  '(VS := update-vs VS 'dynamic-labels-tmp '(dynamic-labels))
  '(Code := append Code (list (append '(Code :=) (reduce '(list (env-label PP VS)) VS))))
  '(if (int-expr (hash->list VS) '(empty? BB)) goto 15 goto 1))
 '(1 (VS := update-vs VS 'Command '(car BB)) (VS := update-vs VS 'BB '(cdr BB)) (if (int-expr (hash->list VS) '(equal? (second Command) ':=)) goto 164 goto 2))
 '(2 (if (int-expr (hash->list VS) '(equal? (car Command) 'goto)) goto 6 goto 3))
 '(3 (if (int-expr (hash->list VS) '(equal? (car Command) 'if)) goto 30 goto 4))
 '(4 (if (int-expr (hash->list VS) '(equal? (car Command) 'return)) goto 5 goto 7))
 '(5
   (Code := append Code (list (append '(Code :=) (reduce '(append Code (list (append (list 'return) (reduce (cdr Command) VS)))) VS))))
   (if (int-expr (hash->list VS) '(empty? BB)) goto 15 goto 1))
 '(6 (VS := update-vs VS 'BB '(hash-ref program (cadr Command) ())) (if (int-expr (hash->list VS) '(empty? BB)) goto 15 goto 1))
 '(7 (Code := append Code (list (append '(return) (reduce '(error "TRICK-MIX: error instruction") VS)))) (Res := append Res (list Code)) (if (set-empty? Pending) goto 8 goto 9))
 '(8 (return Res))
 '(9
   (PPVS := set-first Pending)
   (Pending := set-rest Pending)
   (PP := car PPVS)
   (VS := cdr PPVS)
   (Marked := set-add Marked PPVS)
   (Code := list (env-label PP VS))
   (if (equal? PP 'do-static-if-true) goto 10 goto 28))
 '(10 (VS := update-vs VS 'BB '(hash-ref program (fourth Command) ())) (if (int-expr (hash->list VS) '(empty? BB)) goto 11 goto 124))
 '(11
   (Code := append Code (list (append '(Res :=) (reduce '(append Res (list Code)) VS))))
   (Pending := update-pending-with-lbl Pending VS Marked 'stop 'loop-begin)
   (Code := append Code (list (append (append '(if) (list (reduce '(set-empty? Pending) VS))) (list goto (env-label 'stop VS) goto (env-label 'loop-begin VS)))))
   (Res := append Res (list Code))
   (if (set-empty? Pending) goto 12 goto 13))
 '(12 (return Res))
 '(13
   (PPVS := set-first Pending)
   (Pending := set-rest Pending)
   (PP := car PPVS)
   (VS := cdr PPVS)
   (Marked := set-add Marked PPVS)
   (Code := list (env-label PP VS))
   (if (equal? PP 'do-static-if-true) goto 14 goto 17))
 '(14 (VS := update-vs VS 'BB '(hash-ref program (fourth Command) ())) (if (int-expr (hash->list VS) '(empty? BB)) goto 11 goto 124))
 '(15
   (Code := append Code (list (append '(Res :=) (reduce '(append Res (list Code)) VS))))
   (Pending := update-pending-with-lbl Pending VS Marked 'stop 'loop-begin)
   (Code := append Code (list (append (append '(if) (list (reduce '(set-empty? Pending) VS))) (list goto (env-label 'stop VS) goto (env-label 'loop-begin VS)))))
   (Res := append Res (list Code))
   (if (set-empty? Pending) goto 162 goto 16))
 '(16
   (PPVS := set-first Pending)
   (Pending := set-rest Pending)
   (PP := car PPVS)
   (VS := cdr PPVS)
   (Marked := set-add Marked PPVS)
   (Code := list (env-label PP VS))
   (if (equal? PP 'do-static-if-true) goto 14 goto 17))
 '(17 (if (equal? PP 'do-static-if-false) goto 18 goto 113))
 '(18 (VS := update-vs VS 'BB '(hash-ref program (sixth Command) ())) (if (int-expr (hash->list VS) '(empty? BB)) goto 19 goto 22))
 '(19
   (Code := append Code (list (append '(Res :=) (reduce '(append Res (list Code)) VS))))
   (Pending := update-pending-with-lbl Pending VS Marked 'stop 'loop-begin)
   (Code := append Code (list (append (append '(if) (list (reduce '(set-empty? Pending) VS))) (list goto (env-label 'stop VS) goto (env-label 'loop-begin VS)))))
   (Res := append Res (list Code))
   (if (set-empty? Pending) goto 21 goto 20))
 '(20
   (PPVS := set-first Pending)
   (Pending := set-rest Pending)
   (PP := car PPVS)
   (VS := cdr PPVS)
   (Marked := set-add Marked PPVS)
   (Code := list (env-label PP VS))
   (if (equal? PP 'do-static-if-true) goto 14 goto 17))
 '(21 (return Res))
 '(22 (VS := update-vs VS 'Command '(car BB)) (VS := update-vs VS 'BB '(cdr BB)) (if (int-expr (hash->list VS) '(equal? (second Command) ':=)) goto 25 goto 23))
 '(23 (if (int-expr (hash->list VS) '(equal? (car Command) 'goto)) goto 24 goto 141))
 '(24 (VS := update-vs VS 'BB '(hash-ref program (cadr Command) ())) (if (int-expr (hash->list VS) '(empty? BB)) goto 19 goto 22))
 '(25 (if (int-expr (hash->list VS) '(is-static (first Command) static)) goto 27 goto 26))
 '(26
   (Code := append Code (list (append '(Code :=) (reduce '(append Code (list (append (list (first Command) ':=) (reduce (cddr Command) VS)))) VS))))
   (if (int-expr (hash->list VS) '(empty? BB)) goto 19 goto 22))
 '(27 (Code := append Code (list (append '(VS :=) (reduce '(update-vs VS (first Command) (cddr Command)) VS)))) (if (int-expr (hash->list VS) '(empty? BB)) goto 19 goto 22))
 '(28 (if (equal? PP 'do-static-if-false) goto 29 goto 122))
 '(29 (VS := update-vs VS 'BB '(hash-ref program (sixth Command) ())) (if (int-expr (hash->list VS) '(empty? BB)) goto 19 goto 22))
 '(30 (if (int-expr (hash->list VS) '(is-static (second Command) static)) goto 31 goto 44))
 '(31
   (Pending := update-pending-with-lbl Pending VS Marked 'do-static-if-true 'do-static-if-false)
   (Code
    :=
    append
    Code
    (list
     (append (append '(if) (list (reduce '(int-expr (hash->list VS) (second Command)) VS))) (list goto (env-label 'do-static-if-true VS) goto (env-label 'do-static-if-false VS)))))
   (Res := append Res (list Code))
   (if (set-empty? Pending) goto 32 goto 33))
 '(32 (return Res))
 '(33
   (PPVS := set-first Pending)
   (Pending := set-rest Pending)
   (PP := car PPVS)
   (VS := cdr PPVS)
   (Marked := set-add Marked PPVS)
   (Code := list (env-label PP VS))
   (if (equal? PP 'do-static-if-true) goto 41 goto 34))
 '(34 (if (equal? PP 'do-static-if-false) goto 40 goto 35))
 '(35 (if (equal? PP 'next) goto 36 goto 49))
 '(36 (VS := update-vs VS 'dynamic-labels-tmp '(dynamic-labels)) (if (int-expr (hash->list VS) '(empty? BB)) goto 46 goto 37))
 '(37 (VS := update-vs VS 'Command '(car BB)) (VS := update-vs VS 'BB '(cdr BB)) (if (int-expr (hash->list VS) '(equal? (second Command) ':=)) goto 38 goto 42))
 '(38 (if (int-expr (hash->list VS) '(is-static (first Command) static)) goto 45 goto 39))
 '(39
   (Code := append Code (list (append '(Code :=) (reduce '(append Code (list (append (list (first Command) ':=) (reduce (cddr Command) VS)))) VS))))
   (if (int-expr (hash->list VS) '(empty? BB)) goto 46 goto 37))
 '(40 (VS := update-vs VS 'BB '(hash-ref program (sixth Command) ())) (if (int-expr (hash->list VS) '(empty? BB)) goto 19 goto 22))
 '(41 (VS := update-vs VS 'BB '(hash-ref program (fourth Command) ())) (if (int-expr (hash->list VS) '(empty? BB)) goto 11 goto 124))
 '(42 (if (int-expr (hash->list VS) '(equal? (car Command) 'goto)) goto 43 goto 91))
 '(43 (VS := update-vs VS 'BB '(hash-ref program (cadr Command) ())) (if (int-expr (hash->list VS) '(empty? BB)) goto 46 goto 37))
 '(44
   (Code := append Code (list (append '(Pending :=) (reduce '(update-pending-with-lbl Pending VS Marked (fourth Command) (sixth Command)) VS))))
   (Code
    :=
    append
    Code
    (list
     (append
      '(Code :=)
      (reduce
       '(append Code (list (append (append (list 'if) (list (reduce (second Command) VS))) (list goto (env-label (fourth Command) VS) goto (env-label (sixth Command) VS)))))
       VS))))
   (if (int-expr (hash->list VS) '(empty? BB)) goto 15 goto 1))
 '(45 (Code := append Code (list (append '(VS :=) (reduce '(update-vs VS (first Command) (cddr Command)) VS)))) (if (int-expr (hash->list VS) '(empty? BB)) goto 46 goto 37))
 '(46
   (Code := append Code (list (append '(Res :=) (reduce '(append Res (list Code)) VS))))
   (Pending := update-pending-with-lbl Pending VS Marked 'stop 'loop-begin)
   (Code := append Code (list (append (append '(if) (list (reduce '(set-empty? Pending) VS))) (list goto (env-label 'stop VS) goto (env-label 'loop-begin VS)))))
   (Res := append Res (list Code))
   (if (set-empty? Pending) goto 47 goto 48))
 '(47 (return Res))
 '(48
   (PPVS := set-first Pending)
   (Pending := set-rest Pending)
   (PP := car PPVS)
   (VS := cdr PPVS)
   (Marked := set-add Marked PPVS)
   (Code := list (env-label PP VS))
   (if (equal? PP 'do-static-if-true) goto 14 goto 17))
 '(49 (if (equal? PP 'exist-dyn) goto 50 goto 102))
 '(50 (if (int-expr (hash->list VS) '(empty? dynamic-labels-tmp)) goto 51 goto 56))
 '(51 (Code := append Code (list (append '(return) (reduce '('no-dyn-lbl) VS)))) (Res := append Res (list Code)) (if (set-empty? Pending) goto 163 goto 52))
 '(52
   (PPVS := set-first Pending)
   (Pending := set-rest Pending)
   (PP := car PPVS)
   (VS := cdr PPVS)
   (Marked := set-add Marked PPVS)
   (Code := list (env-label PP VS))
   (if (equal? PP 'do-static-if-true) goto 55 goto 53))
 '(53 (if (equal? PP 'do-static-if-false) goto 54 goto 104))
 '(54 (VS := update-vs VS 'BB '(hash-ref program (sixth Command) ())) (if (int-expr (hash->list VS) '(empty? BB)) goto 19 goto 22))
 '(55 (VS := update-vs VS 'BB '(hash-ref program (fourth Command) ())) (if (int-expr (hash->list VS) '(empty? BB)) goto 11 goto 124))
 '(56
   (VS := update-vs VS 'pp-tmp '(caar dynamic-labels-tmp))
   (VS := update-vs VS 'BB '(cdar dynamic-labels-tmp))
   (VS := update-vs VS 'dynamic-labels-tmp '(cdr dynamic-labels-tmp))
   (Pending := update-pending-with-lbl Pending VS Marked 'next 'exist-dyn)
   (Code := append Code (list (append (append '(if) (list (reduce '(equal? PP pp-tmp) VS))) (list goto (env-label 'next VS) goto (env-label 'exist-dyn VS)))))
   (Res := append Res (list Code))
   (if (set-empty? Pending) goto 57 goto 58))
 '(57 (return Res))
 '(58
   (PPVS := set-first Pending)
   (Pending := set-rest Pending)
   (PP := car PPVS)
   (VS := cdr PPVS)
   (Marked := set-add Marked PPVS)
   (Code := list (env-label PP VS))
   (if (equal? PP 'do-static-if-true) goto 59 goto 60))
 '(59 (VS := update-vs VS 'BB '(hash-ref program (fourth Command) ())) (if (int-expr (hash->list VS) '(empty? BB)) goto 11 goto 124))
 '(60 (if (equal? PP 'do-static-if-false) goto 61 goto 62))
 '(61 (VS := update-vs VS 'BB '(hash-ref program (sixth Command) ())) (if (int-expr (hash->list VS) '(empty? BB)) goto 19 goto 22))
 '(62 (if (equal? PP 'next) goto 63 goto 64))
 '(63 (VS := update-vs VS 'dynamic-labels-tmp '(dynamic-labels)) (if (int-expr (hash->list VS) '(empty? BB)) goto 46 goto 37))
 '(64 (if (equal? PP 'exist-dyn) goto 65 goto 66))
 '(65 (if (int-expr (hash->list VS) '(empty? dynamic-labels-tmp)) goto 51 goto 56))
 '(66 (if (equal? PP 'stop) goto 67 goto 75))
 '(67 (Code := append Code (list (append '(return) (reduce '(Res) VS)))) (Res := append Res (list Code)) (if (set-empty? Pending) goto 68 goto 69))
 '(68 (return Res))
 '(69
   (PPVS := set-first Pending)
   (Pending := set-rest Pending)
   (PP := car PPVS)
   (VS := cdr PPVS)
   (Marked := set-add Marked PPVS)
   (Code := list (env-label PP VS))
   (if (equal? PP 'do-static-if-true) goto 70 goto 71))
 '(70 (VS := update-vs VS 'BB '(hash-ref program (fourth Command) ())) (if (int-expr (hash->list VS) '(empty? BB)) goto 11 goto 124))
 '(71 (if (equal? PP 'do-static-if-false) goto 72 goto 73))
 '(72 (VS := update-vs VS 'BB '(hash-ref program (sixth Command) ())) (if (int-expr (hash->list VS) '(empty? BB)) goto 19 goto 22))
 '(73 (if (equal? PP 'next) goto 74 goto 82))
 '(74 (VS := update-vs VS 'dynamic-labels-tmp '(dynamic-labels)) (if (int-expr (hash->list VS) '(empty? BB)) goto 46 goto 37))
 '(75 (if (equal? PP 'loop-begin) goto 76 goto 90))
 '(76
   (Code := append Code (list (append '(PPVS :=) (reduce '(set-first Pending) VS))))
   (Code := append Code (list (append '(Pending :=) (reduce '(set-rest Pending) VS))))
   (Code := append Code (list (append '(PP :=) (reduce '(car PPVS) VS))))
   (Code := append Code (list (append '(VS :=) (reduce '(cdr PPVS) VS))))
   (Code := append Code (list (append '(Marked :=) (reduce '(set-add Marked PPVS) VS))))
   (Code := append Code (list (append '(Code :=) (reduce '(list (env-label PP VS)) VS))))
   (if (int-expr (hash->list VS) '(empty? dynamic-labels-tmp)) goto 79 goto 77))
 '(77
   (VS := update-vs VS 'pp-tmp '(caar dynamic-labels-tmp))
   (VS := update-vs VS 'BB '(cdar dynamic-labels-tmp))
   (VS := update-vs VS 'dynamic-labels-tmp '(cdr dynamic-labels-tmp))
   (Pending := update-pending-with-lbl Pending VS Marked 'next 'exist-dyn)
   (Code := append Code (list (append (append '(if) (list (reduce '(equal? PP pp-tmp) VS))) (list goto (env-label 'next VS) goto (env-label 'exist-dyn VS)))))
   (Res := append Res (list Code))
   (if (set-empty? Pending) goto 89 goto 78))
 '(78
   (PPVS := set-first Pending)
   (Pending := set-rest Pending)
   (PP := car PPVS)
   (VS := cdr PPVS)
   (Marked := set-add Marked PPVS)
   (Code := list (env-label PP VS))
   (if (equal? PP 'do-static-if-true) goto 59 goto 60))
 '(79 (Code := append Code (list (append '(return) (reduce '('no-dyn-lbl) VS)))) (Res := append Res (list Code)) (if (set-empty? Pending) goto 80 goto 81))
 '(80 (return Res))
 '(81
   (PPVS := set-first Pending)
   (Pending := set-rest Pending)
   (PP := car PPVS)
   (VS := cdr PPVS)
   (Marked := set-add Marked PPVS)
   (Code := list (env-label PP VS))
   (if (equal? PP 'do-static-if-true) goto 55 goto 53))
 '(82 (if (equal? PP 'exist-dyn) goto 86 goto 83))
 '(83 (if (equal? PP 'stop) goto 88 goto 84))
 '(84 (if (equal? PP 'loop-begin) goto 85 goto 87))
 '(85
   (Code := append Code (list (append '(PPVS :=) (reduce '(set-first Pending) VS))))
   (Code := append Code (list (append '(Pending :=) (reduce '(set-rest Pending) VS))))
   (Code := append Code (list (append '(PP :=) (reduce '(car PPVS) VS))))
   (Code := append Code (list (append '(VS :=) (reduce '(cdr PPVS) VS))))
   (Code := append Code (list (append '(Marked :=) (reduce '(set-add Marked PPVS) VS))))
   (Code := append Code (list (append '(Code :=) (reduce '(list (env-label PP VS)) VS))))
   (if (int-expr (hash->list VS) '(empty? dynamic-labels-tmp)) goto 79 goto 77))
 '(86 (if (int-expr (hash->list VS) '(empty? dynamic-labels-tmp)) goto 51 goto 56))
 '(87 (return 'no-dyn-lbl))
 '(88 (Code := append Code (list (append '(return) (reduce '(Res) VS)))) (Res := append Res (list Code)) (if (set-empty? Pending) goto 68 goto 69))
 '(89 (return Res))
 '(90 (return 'no-dyn-lbl))
 '(91 (if (int-expr (hash->list VS) '(equal? (car Command) 'if)) goto 92 goto 96))
 '(92 (if (int-expr (hash->list VS) '(is-static (second Command) static)) goto 94 goto 93))
 '(93
   (Code := append Code (list (append '(Pending :=) (reduce '(update-pending-with-lbl Pending VS Marked (fourth Command) (sixth Command)) VS))))
   (Code
    :=
    append
    Code
    (list
     (append
      '(Code :=)
      (reduce
       '(append Code (list (append (append (list 'if) (list (reduce (second Command) VS))) (list goto (env-label (fourth Command) VS) goto (env-label (sixth Command) VS)))))
       VS))))
   (if (int-expr (hash->list VS) '(empty? BB)) goto 46 goto 37))
 '(94
   (Pending := update-pending-with-lbl Pending VS Marked 'do-static-if-true 'do-static-if-false)
   (Code
    :=
    append
    Code
    (list
     (append (append '(if) (list (reduce '(int-expr (hash->list VS) (second Command)) VS))) (list goto (env-label 'do-static-if-true VS) goto (env-label 'do-static-if-false VS)))))
   (Res := append Res (list Code))
   (if (set-empty? Pending) goto 101 goto 95))
 '(95
   (PPVS := set-first Pending)
   (Pending := set-rest Pending)
   (PP := car PPVS)
   (VS := cdr PPVS)
   (Marked := set-add Marked PPVS)
   (Code := list (env-label PP VS))
   (if (equal? PP 'do-static-if-true) goto 41 goto 34))
 '(96 (if (int-expr (hash->list VS) '(equal? (car Command) 'return)) goto 100 goto 97))
 '(97 (Code := append Code (list (append '(return) (reduce '(error "TRICK-MIX: error instruction") VS)))) (Res := append Res (list Code)) (if (set-empty? Pending) goto 98 goto 99))
 '(98 (return Res))
 '(99
   (PPVS := set-first Pending)
   (Pending := set-rest Pending)
   (PP := car PPVS)
   (VS := cdr PPVS)
   (Marked := set-add Marked PPVS)
   (Code := list (env-label PP VS))
   (if (equal? PP 'do-static-if-true) goto 10 goto 28))
 '(100
   (Code := append Code (list (append '(Code :=) (reduce '(append Code (list (append (list 'return) (reduce (cdr Command) VS)))) VS))))
   (if (int-expr (hash->list VS) '(empty? BB)) goto 46 goto 37))
 '(101 (return Res))
 '(102 (if (equal? PP 'stop) goto 103 goto 152))
 '(103 (Code := append Code (list (append '(return) (reduce '(Res) VS)))) (Res := append Res (list Code)) (if (set-empty? Pending) goto 68 goto 69))
 '(104 (if (equal? PP 'next) goto 105 goto 106))
 '(105 (VS := update-vs VS 'dynamic-labels-tmp '(dynamic-labels)) (if (int-expr (hash->list VS) '(empty? BB)) goto 46 goto 37))
 '(106 (if (equal? PP 'exist-dyn) goto 107 goto 108))
 '(107 (if (int-expr (hash->list VS) '(empty? dynamic-labels-tmp)) goto 51 goto 56))
 '(108 (if (equal? PP 'stop) goto 109 goto 110))
 '(109 (Code := append Code (list (append '(return) (reduce '(Res) VS)))) (Res := append Res (list Code)) (if (set-empty? Pending) goto 68 goto 69))
 '(110 (if (equal? PP 'loop-begin) goto 112 goto 111))
 '(111 (return 'no-dyn-lbl))
 '(112
   (Code := append Code (list (append '(PPVS :=) (reduce '(set-first Pending) VS))))
   (Code := append Code (list (append '(Pending :=) (reduce '(set-rest Pending) VS))))
   (Code := append Code (list (append '(PP :=) (reduce '(car PPVS) VS))))
   (Code := append Code (list (append '(VS :=) (reduce '(cdr PPVS) VS))))
   (Code := append Code (list (append '(Marked :=) (reduce '(set-add Marked PPVS) VS))))
   (Code := append Code (list (append '(Code :=) (reduce '(list (env-label PP VS)) VS))))
   (if (int-expr (hash->list VS) '(empty? dynamic-labels-tmp)) goto 79 goto 77))
 '(113 (if (equal? PP 'next) goto 114 goto 115))
 '(114 (VS := update-vs VS 'dynamic-labels-tmp '(dynamic-labels)) (if (int-expr (hash->list VS) '(empty? BB)) goto 46 goto 37))
 '(115 (if (equal? PP 'exist-dyn) goto 116 goto 117))
 '(116 (if (int-expr (hash->list VS) '(empty? dynamic-labels-tmp)) goto 51 goto 56))
 '(117 (if (equal? PP 'stop) goto 120 goto 118))
 '(118 (if (equal? PP 'loop-begin) goto 121 goto 119))
 '(119 (return 'no-dyn-lbl))
 '(120 (Code := append Code (list (append '(return) (reduce '(Res) VS)))) (Res := append Res (list Code)) (if (set-empty? Pending) goto 68 goto 69))
 '(121
   (Code := append Code (list (append '(PPVS :=) (reduce '(set-first Pending) VS))))
   (Code := append Code (list (append '(Pending :=) (reduce '(set-rest Pending) VS))))
   (Code := append Code (list (append '(PP :=) (reduce '(car PPVS) VS))))
   (Code := append Code (list (append '(VS :=) (reduce '(cdr PPVS) VS))))
   (Code := append Code (list (append '(Marked :=) (reduce '(set-add Marked PPVS) VS))))
   (Code := append Code (list (append '(Code :=) (reduce '(list (env-label PP VS)) VS))))
   (if (int-expr (hash->list VS) '(empty? dynamic-labels-tmp)) goto 79 goto 77))
 '(122 (if (equal? PP 'next) goto 123 goto 155))
 '(123 (VS := update-vs VS 'dynamic-labels-tmp '(dynamic-labels)) (if (int-expr (hash->list VS) '(empty? BB)) goto 46 goto 37))
 '(124 (VS := update-vs VS 'Command '(car BB)) (VS := update-vs VS 'BB '(cdr BB)) (if (int-expr (hash->list VS) '(equal? (second Command) ':=)) goto 125 goto 127))
 '(125 (if (int-expr (hash->list VS) '(is-static (first Command) static)) goto 126 goto 139))
 '(126 (Code := append Code (list (append '(VS :=) (reduce '(update-vs VS (first Command) (cddr Command)) VS)))) (if (int-expr (hash->list VS) '(empty? BB)) goto 11 goto 124))
 '(127 (if (int-expr (hash->list VS) '(equal? (car Command) 'goto)) goto 128 goto 129))
 '(128 (VS := update-vs VS 'BB '(hash-ref program (cadr Command) ())) (if (int-expr (hash->list VS) '(empty? BB)) goto 11 goto 124))
 '(129 (if (int-expr (hash->list VS) '(equal? (car Command) 'if)) goto 130 goto 134))
 '(130 (if (int-expr (hash->list VS) '(is-static (second Command) static)) goto 131 goto 133))
 '(131
   (Pending := update-pending-with-lbl Pending VS Marked 'do-static-if-true 'do-static-if-false)
   (Code
    :=
    append
    Code
    (list
     (append (append '(if) (list (reduce '(int-expr (hash->list VS) (second Command)) VS))) (list goto (env-label 'do-static-if-true VS) goto (env-label 'do-static-if-false VS)))))
   (Res := append Res (list Code))
   (if (set-empty? Pending) goto 140 goto 132))
 '(132
   (PPVS := set-first Pending)
   (Pending := set-rest Pending)
   (PP := car PPVS)
   (VS := cdr PPVS)
   (Marked := set-add Marked PPVS)
   (Code := list (env-label PP VS))
   (if (equal? PP 'do-static-if-true) goto 41 goto 34))
 '(133
   (Code := append Code (list (append '(Pending :=) (reduce '(update-pending-with-lbl Pending VS Marked (fourth Command) (sixth Command)) VS))))
   (Code
    :=
    append
    Code
    (list
     (append
      '(Code :=)
      (reduce
       '(append Code (list (append (append (list 'if) (list (reduce (second Command) VS))) (list goto (env-label (fourth Command) VS) goto (env-label (sixth Command) VS)))))
       VS))))
   (if (int-expr (hash->list VS) '(empty? BB)) goto 11 goto 124))
 '(134 (if (int-expr (hash->list VS) '(equal? (car Command) 'return)) goto 138 goto 135))
 '(135
   (Code := append Code (list (append '(return) (reduce '(error "TRICK-MIX: error instruction") VS))))
   (Res := append Res (list Code))
   (if (set-empty? Pending) goto 136 goto 137))
 '(136 (return Res))
 '(137
   (PPVS := set-first Pending)
   (Pending := set-rest Pending)
   (PP := car PPVS)
   (VS := cdr PPVS)
   (Marked := set-add Marked PPVS)
   (Code := list (env-label PP VS))
   (if (equal? PP 'do-static-if-true) goto 10 goto 28))
 '(138
   (Code := append Code (list (append '(Code :=) (reduce '(append Code (list (append (list 'return) (reduce (cdr Command) VS)))) VS))))
   (if (int-expr (hash->list VS) '(empty? BB)) goto 11 goto 124))
 '(139
   (Code := append Code (list (append '(Code :=) (reduce '(append Code (list (append (list (first Command) ':=) (reduce (cddr Command) VS)))) VS))))
   (if (int-expr (hash->list VS) '(empty? BB)) goto 11 goto 124))
 '(140 (return Res))
 '(141 (if (int-expr (hash->list VS) '(equal? (car Command) 'if)) goto 147 goto 142))
 '(142 (if (int-expr (hash->list VS) '(equal? (car Command) 'return)) goto 143 goto 144))
 '(143
   (Code := append Code (list (append '(Code :=) (reduce '(append Code (list (append (list 'return) (reduce (cdr Command) VS)))) VS))))
   (if (int-expr (hash->list VS) '(empty? BB)) goto 19 goto 22))
 '(144
   (Code := append Code (list (append '(return) (reduce '(error "TRICK-MIX: error instruction") VS))))
   (Res := append Res (list Code))
   (if (set-empty? Pending) goto 145 goto 146))
 '(145 (return Res))
 '(146
   (PPVS := set-first Pending)
   (Pending := set-rest Pending)
   (PP := car PPVS)
   (VS := cdr PPVS)
   (Marked := set-add Marked PPVS)
   (Code := list (env-label PP VS))
   (if (equal? PP 'do-static-if-true) goto 10 goto 28))
 '(147 (if (int-expr (hash->list VS) '(is-static (second Command) static)) goto 148 goto 150))
 '(148
   (Pending := update-pending-with-lbl Pending VS Marked 'do-static-if-true 'do-static-if-false)
   (Code
    :=
    append
    Code
    (list
     (append (append '(if) (list (reduce '(int-expr (hash->list VS) (second Command)) VS))) (list goto (env-label 'do-static-if-true VS) goto (env-label 'do-static-if-false VS)))))
   (Res := append Res (list Code))
   (if (set-empty? Pending) goto 149 goto 151))
 '(149 (return Res))
 '(150
   (Code := append Code (list (append '(Pending :=) (reduce '(update-pending-with-lbl Pending VS Marked (fourth Command) (sixth Command)) VS))))
   (Code
    :=
    append
    Code
    (list
     (append
      '(Code :=)
      (reduce
       '(append Code (list (append (append (list 'if) (list (reduce (second Command) VS))) (list goto (env-label (fourth Command) VS) goto (env-label (sixth Command) VS)))))
       VS))))
   (if (int-expr (hash->list VS) '(empty? BB)) goto 19 goto 22))
 '(151
   (PPVS := set-first Pending)
   (Pending := set-rest Pending)
   (PP := car PPVS)
   (VS := cdr PPVS)
   (Marked := set-add Marked PPVS)
   (Code := list (env-label PP VS))
   (if (equal? PP 'do-static-if-true) goto 41 goto 34))
 '(152 (if (equal? PP 'loop-begin) goto 153 goto 154))
 '(153
   (Code := append Code (list (append '(PPVS :=) (reduce '(set-first Pending) VS))))
   (Code := append Code (list (append '(Pending :=) (reduce '(set-rest Pending) VS))))
   (Code := append Code (list (append '(PP :=) (reduce '(car PPVS) VS))))
   (Code := append Code (list (append '(VS :=) (reduce '(cdr PPVS) VS))))
   (Code := append Code (list (append '(Marked :=) (reduce '(set-add Marked PPVS) VS))))
   (Code := append Code (list (append '(Code :=) (reduce '(list (env-label PP VS)) VS))))
   (if (int-expr (hash->list VS) '(empty? dynamic-labels-tmp)) goto 79 goto 77))
 '(154 (return 'no-dyn-lbl))
 '(155 (if (equal? PP 'exist-dyn) goto 160 goto 156))
 '(156 (if (equal? PP 'stop) goto 161 goto 157))
 '(157 (if (equal? PP 'loop-begin) goto 158 goto 159))
 '(158
   (Code := append Code (list (append '(PPVS :=) (reduce '(set-first Pending) VS))))
   (Code := append Code (list (append '(Pending :=) (reduce '(set-rest Pending) VS))))
   (Code := append Code (list (append '(PP :=) (reduce '(car PPVS) VS))))
   (Code := append Code (list (append '(VS :=) (reduce '(cdr PPVS) VS))))
   (Code := append Code (list (append '(Marked :=) (reduce '(set-add Marked PPVS) VS))))
   (Code := append Code (list (append '(Code :=) (reduce '(list (env-label PP VS)) VS))))
   (if (int-expr (hash->list VS) '(empty? dynamic-labels-tmp)) goto 79 goto 77))
 '(159 (return 'no-dyn-lbl))
 '(160 (if (int-expr (hash->list VS) '(empty? dynamic-labels-tmp)) goto 51 goto 56))
 '(161 (Code := append Code (list (append '(return) (reduce '(Res) VS)))) (Res := append Res (list Code)) (if (set-empty? Pending) goto 68 goto 69))
 '(162 (return Res))
 '(163 (return Res))
 '(164 (if (int-expr (hash->list VS) '(is-static (first Command) static)) goto 166 goto 165))
 '(165
   (Code := append Code (list (append '(Code :=) (reduce '(append Code (list (append (list (first Command) ':=) (reduce (cddr Command) VS)))) VS))))
   (if (int-expr (hash->list VS) '(empty? BB)) goto 15 goto 1))
 '(166 (Code := append Code (list (append '(VS :=) (reduce '(update-vs VS (first Command) (cddr Command)) VS)))) (if (int-expr (hash->list VS) '(empty? BB)) goto 15 goto 1)))
`trick-comp`:
(list
 '(read vs0)
 (list
  0
  (list 'Pending ':= 'quote (set))
  '(Res := '((read Right)))
  '(PPVS := env-label 'init (make-immutable-hash vs0))
  '(PP := car PPVS)
  '(VS := cdr PPVS)
  '(Marked := set-add (list->set ()) PPVS)
  '(Code := list (env-label PP VS))
  '(VS := update-vs VS 'Qtail '(Q))
  '(Code := append Code (list (append '(Left :=) (reduce '('()) VS))))
  '(if (int-expr (hash->list VS) '(null? Qtail)) goto 63 goto 1))
 '(1
   (VS := update-vs VS 'Instruction '(car Qtail))
   (VS := update-vs VS 'Qtail '(cdr Qtail))
   (VS := update-vs VS 'Operator '(car Instruction))
   (if (int-expr (hash->list VS) '(equal? Operator 'right)) goto 7 goto 2))
 '(2 (if (int-expr (hash->list VS) '(equal? Operator 'left)) goto 6 goto 3))
 '(3 (if (int-expr (hash->list VS) '(equal? Operator 'write)) goto 66 goto 4))
 '(4 (if (int-expr (hash->list VS) '(equal? Operator 'goto)) goto 5 goto 8))
 '(5 (VS := update-vs VS 'NextLabel '(cadr Instruction)) (VS := update-vs VS 'Qtail '(list-tail Q NextLabel)) (if (int-expr (hash->list VS) '(null? Qtail)) goto 63 goto 1))
 '(6
   (Code := append Code (list (append '(Right :=) (reduce '(cons (car Left) Right) VS))))
   (Code := append Code (list (append '(Left :=) (reduce '(cdr Left) VS))))
   (if (int-expr (hash->list VS) '(null? Qtail)) goto 63 goto 1))
 '(7
   (Code := append Code (list (append '(Left :=) (reduce '(cons (car Right) Left) VS))))
   (Code := append Code (list (append '(Right :=) (reduce '(cdr Right) VS))))
   (if (int-expr (hash->list VS) '(null? Qtail)) goto 63 goto 1))
 '(8 (if (int-expr (hash->list VS) '(equal? Operator 'if)) goto 9 goto 23))
 '(9
   (VS := update-vs VS 'Symbol '(cadr Instruction))
   (VS := update-vs VS 'NextLabel '(cadddr Instruction))
   (Pending := update-pending-with-lbl Pending VS Marked 'jump 'loop)
   (Code := append Code (list (append (append '(if) (list (reduce '(equal? Symbol (car Right)) VS))) (list goto (env-label 'jump VS) goto (env-label 'loop VS)))))
   (Res := append Res (list Code))
   (if (set-empty? Pending) goto 62 goto 10))
 '(10
   (PPVS := set-first Pending)
   (Pending := set-rest Pending)
   (PP := car PPVS)
   (VS := cdr PPVS)
   (Marked := set-add Marked PPVS)
   (Code := list (env-label PP VS))
   (if (equal? PP 'jump) goto 11 goto 42))
 '(11 (VS := update-vs VS 'Qtail '(list-tail Q NextLabel)) (if (int-expr (hash->list VS) '(null? Qtail)) goto 12 goto 19))
 '(12 (Code := append Code (list (append '(return) (reduce '(Right) VS)))) (Res := append Res (list Code)) (if (set-empty? Pending) goto 13 goto 14))
 '(13 (return Res))
 '(14
   (PPVS := set-first Pending)
   (Pending := set-rest Pending)
   (PP := car PPVS)
   (VS := cdr PPVS)
   (Marked := set-add Marked PPVS)
   (Code := list (env-label PP VS))
   (if (equal? PP 'jump) goto 29 goto 15))
 '(15 (if (equal? PP 'loop) goto 17 goto 16))
 '(16 (return 'no-dyn-lbl))
 '(17 (if (int-expr (hash->list VS) '(null? Qtail)) goto 18 goto 31))
 '(18 (Code := append Code (list (append '(return) (reduce '(Right) VS)))) (Res := append Res (list Code)) (if (set-empty? Pending) goto 25 goto 30))
 '(19
   (VS := update-vs VS 'Instruction '(car Qtail))
   (VS := update-vs VS 'Qtail '(cdr Qtail))
   (VS := update-vs VS 'Operator '(car Instruction))
   (if (int-expr (hash->list VS) '(equal? Operator 'right)) goto 20 goto 21))
 '(20
   (Code := append Code (list (append '(Left :=) (reduce '(cons (car Right) Left) VS))))
   (Code := append Code (list (append '(Right :=) (reduce '(cdr Right) VS))))
   (if (int-expr (hash->list VS) '(null? Qtail)) goto 12 goto 19))
 '(21 (if (int-expr (hash->list VS) '(equal? Operator 'left)) goto 22 goto 26))
 '(22
   (Code := append Code (list (append '(Right :=) (reduce '(cons (car Left) Right) VS))))
   (Code := append Code (list (append '(Left :=) (reduce '(cdr Left) VS))))
   (if (int-expr (hash->list VS) '(null? Qtail)) goto 12 goto 19))
 '(23 (Code := append Code (list (append '(return) (reduce '(('syntaxerror: Instruction)) VS)))) (Res := append Res (list Code)) (if (set-empty? Pending) goto 24 goto 41))
 '(24 (return Res))
 '(25 (return Res))
 '(26 (if (int-expr (hash->list VS) '(equal? Operator 'write)) goto 48 goto 27))
 '(27 (if (int-expr (hash->list VS) '(equal? Operator 'goto)) goto 28 goto 33))
 '(28 (VS := update-vs VS 'NextLabel '(cadr Instruction)) (VS := update-vs VS 'Qtail '(list-tail Q NextLabel)) (if (int-expr (hash->list VS) '(null? Qtail)) goto 12 goto 19))
 '(29 (VS := update-vs VS 'Qtail '(list-tail Q NextLabel)) (if (int-expr (hash->list VS) '(null? Qtail)) goto 12 goto 19))
 '(30
   (PPVS := set-first Pending)
   (Pending := set-rest Pending)
   (PP := car PPVS)
   (VS := cdr PPVS)
   (Marked := set-add Marked PPVS)
   (Code := list (env-label PP VS))
   (if (equal? PP 'jump) goto 29 goto 15))
 '(31
   (VS := update-vs VS 'Instruction '(car Qtail))
   (VS := update-vs VS 'Qtail '(cdr Qtail))
   (VS := update-vs VS 'Operator '(car Instruction))
   (if (int-expr (hash->list VS) '(equal? Operator 'right)) goto 32 goto 49))
 '(32
   (Code := append Code (list (append '(Left :=) (reduce '(cons (car Right) Left) VS))))
   (Code := append Code (list (append '(Right :=) (reduce '(cdr Right) VS))))
   (if (int-expr (hash->list VS) '(null? Qtail)) goto 18 goto 31))
 '(33 (if (int-expr (hash->list VS) '(equal? Operator 'if)) goto 34 goto 36))
 '(34
   (VS := update-vs VS 'Symbol '(cadr Instruction))
   (VS := update-vs VS 'NextLabel '(cadddr Instruction))
   (Pending := update-pending-with-lbl Pending VS Marked 'jump 'loop)
   (Code := append Code (list (append (append '(if) (list (reduce '(equal? Symbol (car Right)) VS))) (list goto (env-label 'jump VS) goto (env-label 'loop VS)))))
   (Res := append Res (list Code))
   (if (set-empty? Pending) goto 35 goto 40))
 '(35 (return Res))
 '(36 (Code := append Code (list (append '(return) (reduce '(('syntaxerror: Instruction)) VS)))) (Res := append Res (list Code)) (if (set-empty? Pending) goto 38 goto 37))
 '(37
   (PPVS := set-first Pending)
   (Pending := set-rest Pending)
   (PP := car PPVS)
   (VS := cdr PPVS)
   (Marked := set-add Marked PPVS)
   (Code := list (env-label PP VS))
   (if (equal? PP 'jump) goto 39 goto 45))
 '(38 (return Res))
 '(39 (VS := update-vs VS 'Qtail '(list-tail Q NextLabel)) (if (int-expr (hash->list VS) '(null? Qtail)) goto 12 goto 19))
 '(40
   (PPVS := set-first Pending)
   (Pending := set-rest Pending)
   (PP := car PPVS)
   (VS := cdr PPVS)
   (Marked := set-add Marked PPVS)
   (Code := list (env-label PP VS))
   (if (equal? PP 'jump) goto 11 goto 42))
 '(41
   (PPVS := set-first Pending)
   (Pending := set-rest Pending)
   (PP := car PPVS)
   (VS := cdr PPVS)
   (Marked := set-add Marked PPVS)
   (Code := list (env-label PP VS))
   (if (equal? PP 'jump) goto 39 goto 45))
 '(42 (if (equal? PP 'loop) goto 44 goto 43))
 '(43 (return 'no-dyn-lbl))
 '(44 (if (int-expr (hash->list VS) '(null? Qtail)) goto 18 goto 31))
 '(45 (if (equal? PP 'loop) goto 46 goto 47))
 '(46 (if (int-expr (hash->list VS) '(null? Qtail)) goto 18 goto 31))
 '(47 (return 'no-dyn-lbl))
 '(48
   (VS := update-vs VS 'Symbol '(cadr Instruction))
   (Code := append Code (list (append '(Right :=) (reduce '(cons Symbol (cdr Right)) VS))))
   (if (int-expr (hash->list VS) '(null? Qtail)) goto 12 goto 19))
 '(49 (if (int-expr (hash->list VS) '(equal? Operator 'left)) goto 50 goto 51))
 '(50
   (Code := append Code (list (append '(Right :=) (reduce '(cons (car Left) Right) VS))))
   (Code := append Code (list (append '(Left :=) (reduce '(cdr Left) VS))))
   (if (int-expr (hash->list VS) '(null? Qtail)) goto 18 goto 31))
 '(51 (if (int-expr (hash->list VS) '(equal? Operator 'write)) goto 52 goto 53))
 '(52
   (VS := update-vs VS 'Symbol '(cadr Instruction))
   (Code := append Code (list (append '(Right :=) (reduce '(cons Symbol (cdr Right)) VS))))
   (if (int-expr (hash->list VS) '(null? Qtail)) goto 18 goto 31))
 '(53 (if (int-expr (hash->list VS) '(equal? Operator 'goto)) goto 54 goto 55))
 '(54 (VS := update-vs VS 'NextLabel '(cadr Instruction)) (VS := update-vs VS 'Qtail '(list-tail Q NextLabel)) (if (int-expr (hash->list VS) '(null? Qtail)) goto 18 goto 31))
 '(55 (if (int-expr (hash->list VS) '(equal? Operator 'if)) goto 56 goto 59))
 '(56
   (VS := update-vs VS 'Symbol '(cadr Instruction))
   (VS := update-vs VS 'NextLabel '(cadddr Instruction))
   (Pending := update-pending-with-lbl Pending VS Marked 'jump 'loop)
   (Code := append Code (list (append (append '(if) (list (reduce '(equal? Symbol (car Right)) VS))) (list goto (env-label 'jump VS) goto (env-label 'loop VS)))))
   (Res := append Res (list Code))
   (if (set-empty? Pending) goto 57 goto 58))
 '(57 (return Res))
 '(58
   (PPVS := set-first Pending)
   (Pending := set-rest Pending)
   (PP := car PPVS)
   (VS := cdr PPVS)
   (Marked := set-add Marked PPVS)
   (Code := list (env-label PP VS))
   (if (equal? PP 'jump) goto 11 goto 42))
 '(59 (Code := append Code (list (append '(return) (reduce '(('syntaxerror: Instruction)) VS)))) (Res := append Res (list Code)) (if (set-empty? Pending) goto 60 goto 61))
 '(60 (return Res))
 '(61
   (PPVS := set-first Pending)
   (Pending := set-rest Pending)
   (PP := car PPVS)
   (VS := cdr PPVS)
   (Marked := set-add Marked PPVS)
   (Code := list (env-label PP VS))
   (if (equal? PP 'jump) goto 39 goto 45))
 '(62 (return Res))
 '(63 (Code := append Code (list (append '(return) (reduce '(Right) VS)))) (Res := append Res (list Code)) (if (set-empty? Pending) goto 65 goto 64))
 '(64
   (PPVS := set-first Pending)
   (Pending := set-rest Pending)
   (PP := car PPVS)
   (VS := cdr PPVS)
   (Marked := set-add Marked PPVS)
   (Code := list (env-label PP VS))
   (if (equal? PP 'jump) goto 29 goto 15))
 '(65 (return Res))
 '(66
   (VS := update-vs VS 'Symbol '(cadr Instruction))
   (Code := append Code (list (append '(Right :=) (reduce '(cons Symbol (cdr Right)) VS))))
   (if (int-expr (hash->list VS) '(null? Qtail)) goto 63 goto 1)))
`source`:
'((if 0 goto 3) (right) (goto 0) (write 1))
` trick-target-3`:
'((read Right)
  (0 (Left := '()) (if (equal? '0 (car Right)) goto 1 goto 2))
  (1 (Right := cons '1 (cdr Right)) (return Right))
  (2 (Left := cons (car Right) Left) (Right := cdr Right) (if (equal? '0 (car Right)) goto 1 goto 2)))
check `trick-target-3`:
#t
